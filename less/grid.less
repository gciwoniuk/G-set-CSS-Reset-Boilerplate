/* Grid */

@numcols: 16;
@gutter: 0.5; //Gutter is foo x 1col
@pagewidth: 960;

@marginfixed: (1 - 1/(@gutter+1))*(@pagewidth/@numcols)/2;
@marginfluid: (1 - 1/(@gutter+1))*(100/@numcols)/2;


/* Add these variables in the media queries for new grid.
@media (min-width: 480px) {
	@numcols: 8;
	@gutter: 0.5; //Gutter is foo x 1col
	@pagewidth: 480;
}

@media (min-width: 720px) {
	@numcols: 12;
	@gutter: 0.5; //Gutter is foo x 1col
	@pagewidth: 720;
}

@media (min-width: 960px) {
	@numcols: 16;
	@gutter: 0.5; //Gutter is foo x 1col
	@pagewidth: 960;
}
*/

/* 	Add this mixin to the container which your grid based items will go in.
	Also good for nesting. Keeps things lined up and gives the content full room to manouver.
*/

.grid-fixed() {
	margin-left: ~"-@{marginfixed}px";
	margin-right: ~"-@{marginfixed}px";
}

.grid-fluid() {
	margin-left: ~"-@{marginfluid}%";
	margin-right: ~"-@{marginfluid}%";
}

/* 	How many columns do you want to span?
*/

.spanfixed(@x) {
	@colwidth: (@pagewidth/@numcols)*@x - @marginfixed * 2;
	width: ~"@{colwidth}px";
	margin: ~"@{marginfixed}px";
	float: left;
}

.spanfluid(@x) {
	@colwidth: (100/@numcols)*@x - @marginfluid * 2;
	width: ~"@{colwidth}%";
	margin: ~"@{marginfluid}%";
	float: left;
}

/* Do you want to offset by x columns? */

.offsetfixed(@x) {
	@offset: (@pagewidth/@numcols)*@x + @marginfixed*1;
	margin-left: ~"@{offset}px";
}

.offsetfluid(@x) {
	@offset: (100/@numcols)*@x + @marginfluid*1;
	margin-left: ~"@{offset}%";
}


/* --- Example usage --- */
		[class*="span"] {
			background: #EEE;
		}
		
		.row {
			.clearfix;
			text-align: center;
			.grid-fluid();
			
		}
		
		.span1 {
			.spanfluid(1);
		}
		
		.span3 {
			.spanfluid(3);
		}
		
		.span4 {
			.spanfluid(4);
		}
		
		.span6 {
			.spanfluid(6);
		}
		
		.span8 {
			.spanfluid(8);
		}
		
		.span12 {
			.spanfluid(12);
		}
		
		.span16 {
			.spanfluid(16);
		}
		
		.offset4 {
			.offsetfluid(4);
			
		}
		
		.offset3 {
			.offsetfluid(3);
		}
